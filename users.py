from twcmanage.lib.grafanaclient.utils import base
import userorgs


# Users generated by get do not include ids and cannot run the User methods.
class User(base.Resource):
    def __repr__(self):
        return '<User: %s>' % getattr(self, 'login', 'unknown-login')

    def update(self, email=None, name=None, login=None):
        """Update user."""
        return self.manager.update(email=email, name=name, login=login,
                                   userid=self.id)

    def list_orgs(self):
        """List orgs for user."""
        return self.manager.orgs.list(userid=self.id)


class UserManager(base.BaseManager):
    resource_class = User

    def __init__(self, client):
        super(UserManager, self).__init__(client)
        self.orgs = userorgs.UserOrgManager(client)

    def create(self, login, password, name=None, email=None):
        """Create new user. Admin only."""
        data = {
            'login': login,
            'password': password
        }
        if name:
            data['name'] = name
        if email:
            data['email'] = email
        return self._post("/api/admin/users", json=data)

    def get(self, userid=None):
        """Get user."""
        if userid:
            return self._get('/api/users/%s' % userid)
        else:
            return self._get('/api/user')

    def list(self):
        """List all users."""
        return self._list('/api/users')

    def update(self, email=None, name=None, login=None, userid=None):
        """Update user."""
        data = {}
        if email:
            data['email'] = email
        if name:
            data['name'] = name
        if login:
            data['login'] = login
        if userid:
            return self._put('/api/users/%s' % userid, json=data)
        else:
            return self._put('/api/user', json=data)

    def delete(self, userid):
        """Delete user. Admin only"""
        return self._delete('/api/admin/users/%s' % userid)
